#include <iostream>
#include <string>

using namespace std;

//Selection Methods
int getOperation();
string *getInput(int size);
bool again();
//Lab 02 Methods
int stringLength(char *str);
void stringNCopy(char *str1, const char* str2);
void stringNAdd(char s1[], char s2[], int copiedInd);
int stringNCompare(char s1[], char s2[], int compInd);
//Helper Methods
string promptstr(string msg);
string promptstr(string msg, int num);
int promptint(string msg);

int main() {
	int op;
	int inSize;
	char[][] *input;
	do {
		op = getOperation();
		inSize = 2;
		if (op == 1)
			inSize = 1;
		input = getInput(inSize);
		//Lab 02 specific methods goes inside switch
		switch (op) {
		case 1:
			int size = stringLength(input[0]);
			cout << "This is the size of your string: " << size << endl;
			break;
		case 2:

			break;
		case 3:

			break;
		case 4:

			break;
		}
		delete [] input;
	} while (again());
	//system("pause");
	return 0;
}

int getOperation() {
	int selectedMethod;
	cout << "What would you like to test?" << endl;
	cout << "Enter 1 to test stringLength" << endl;
	cout << "Enter 2 to test stringNCopy" << endl;
	cout << "Enter 3 to test stringLength" << endl;
	cout << "Enter 4 to test stringLength" << endl;
	selectedMethod = promptint("Enter your selection:");
	//string method selection code goes here
	return  selectedMethod;
}

string *getInput(int size) {
	string *input = new string[size];
	for (int i = 0; i < size; i++)
		*(input + i) = promptstr("Please enter string #",i+1);
	return input;
}

bool again() {
	string responce;
	while (true) {
		cout << endl;
		cout << "Would you like to try another method?" << endl;
		responce = promptstr("Please respond with yes or no");
		if (!responce.compare("yes"))
			return true;
		else if (!responce.compare("no"))
			return false;
		cout << endl;
		cout << "Error, Invalid input" << endl;
		cout << "Reprompting..." << endl << endl;
	}
}

int stringLength(char str[]) {
	for (int index = 0;;index++) {
		if (str[index] == NULL)
			return index;
	}
}

void stringNCopy(char str1[], char str2[], int max) {
	for (int index = 0; index < max; index++) {
		if (str2[index] == NULL)
			break;
		str1[index] = str2[index];
	}
}

void stringNAdd(char s1[], char s2[], int copiedInd)
{
	int ind = 0;
	while(s1[ind] != '\0')
	{
		ind++;
	}
	int add;
	for (add = 0; add < copiedInd; add++)
	{
		s1[ind + add] = s2[add];
	}
	s1[ind + add] = '\0';
}

int stringNCompare(char s1[], char s2[], int compInd)
{
	for (int ind = 0; ind < compInd; ind++)
	{
		if (s1[ind] == '\0')
			return -1;//s1 is smaller than s2
		if (s2[ind] == '\0')
			return 1; // s1 is bigger than s2
		if (s1[ind] < s2[ind])
			return -1;// s1 is smaller than s2
		if (s1[ind] > s2[ind])
			return 1;// s1 is bigger than s2
	}
	return 0;//comparison ended with both string equal in compared section
}

string promptstr(string msg) {
	string str;
	cout << msg << endl;
	cin >> str;
	return str;
}

string promptstr(string msg, int num) {
	string str;
	cout << msg << num << endl;
	cin >> str;
	return str;
}

int promptint(string msg) {
	int num;
	cout << msg << endl;
	cin >> num;
	return num;
}
